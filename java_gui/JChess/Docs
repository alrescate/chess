  a  b  c  d  e  f  g  h    
8 0  1  2  3  4  5  6  7  8
7 8  9  10 11 12 13 14 15 7
6 16 17 18 19 20 21 22 23 6
5 24 25 26 27 28 29 30 31 5
4 32 33 34 35 36 37 38 39 4
3 40 41 42 43 44 45 46 47 3 
2 48 49 50 51 52 53 54 55 2
1 56 57 58 59 60 61 62 63 1
  a  b  c  d  e  f  g  h

Pieces are encoded in a byte, semi 1-hot, following this scheme:
  E C K Q B N R P
  0 0 0 0 0 0 0 0
where E, the empty bit, must be the only set bit if a square is empty, but C, the color bit
(where 0 = white piece) may share hot status with at most one bit from bits 2 - 7. Thus...
  1 0 0 0 0 0 0 0 => Empty
  0 1 1 0 0 0 0 0 => Black King
  0 0 1 0 0 0 0 0 => White King
  0 1 0 1 0 0 0 0 => Black Queen
  0 0 0 1 0 0 0 0 => White Queen
etc. for all possible combinations. From bits 2 to 7, the piece associations were chosen envisioning moving
in from a corner towards the center, and then up to include the pawn. 

Castling is encoded with one byte, in which the high nybble is always 0000. The scheme is:
  K Q k q
  0 0 0 0
where K/Q correspond to white king & queen castles, and k/q correspond to black king & queen castles.
Thus...
  1 1 0 0 => white has both castles, black has neither
  1 0 1 0 => both players have kingside castles, neither has queenside
  1 1 1 1 => all castles are valid
  0 0 0 0 => no castles are valid
etc. for all possible combinations. It is a pure 1-hot encoding scheme which uses a whole byte simply because
memory cannot be addressed in smaller increments

The flipTable is a series of relationships between square indices and where they flip to on the board. 
Flipping here refers to a row inversion, such that the square on row 4, column 7 will flip to row 3, column 7.
flipTable[60] = 4
flipTable[0]  = 56
flipTable[20] = 44
etc. for all values 0-63. Flipping in this way is necessary for preserving the sense of the board
when converting black into white for play, but would be wrong for flipping the display of the board.
That operation requires rotation. This table is generated once, within the setup() function.

The pathTable is a 64x64x8, 0xff padded 3D array relating a representation of a move pair (from, to) to an array of the at most 6
squares through which that move would pass, excluding knight moves as they do not pass through anything. 
The from index is used first, and the to index second, to produce the array of indices through which that move 
would take a piece.
Thus...
pathTable[0] [63] = [9,  18,   27,   36,   45,   54,   0xff, 0xff]
pathTable[12][44] = [20, 28,   36,   0xff, 0xff, 0xff, 0xff, 0xff]
pathTable[61][47] = [54, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
etc. for all combinations of from and to. This table is generated once, within the setup() function.

The physTable is a 33x64x32, 0xff padded 3D array relating a piece key and an index to an array of no more than 32
potential squares onto which that piece, from that square, could move to. All piece keys are done using white's encoding,
to keep from using excessive padding. The outer dimension must be 33 wide because the highest piece key, 32,
must be a valid index into the array. The 64 valid square indices, 0...63, are used for the second dimension. 
Thus...
physTable[wPawn] [32] = [24, 0xff, 0xff, ...]
physTable[wQueen][45] = [5,  13,   21,   29,   37, 53, 61, 40, 41, 42, 43, 44, 46, 47, 36, 38, 52, 54, 27, 31, 59, 63, 18, 9, 0, 0xff, 0xff, ...]
physTable[wPawn] [48] = [40, 32,   0xff, 0xff, ...]
etc. for all possible combinations. This taable is generated once, within the setup() function.
